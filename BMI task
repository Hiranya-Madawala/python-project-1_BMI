import tkinter as tk
from tkinter import messagebox
import json
import os
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

# Create a dictionary to store BMI categories and their ranges
bmi_categories = {
    "Underweight": (0, 18.4),
    "Normal": (18.5, 24.9),
    "Overweight": (25, 29.9),
    "Obese": (30, float('inf'))
}

# Validate 
def validate_input(name, age, height, weight):
    if not name or not age or not height or not weight:
        return False
    try:
        age = int(age)
        height = float(height)
        weight = float(weight)
        if age <= 0 or height <= 0 or weight <= 0:
            return False
    except ValueError:
        return False
    return True

def calculate_bmi(height, weight):
    return weight / (height ** 2)

# Determine BMI category
def get_bmi_category(bmi):
    for category, (lower, upper) in bmi_categories.items():
        if lower <= bmi <= upper:
            return category

# Save data to a JSON file
def save_data(data):
    with open("bmi_data.json", "a") as f:
        json.dump(data, f)
        f.write("\n")

# Read data from the JSON file
def read_data():
    if os.path.exists("bmi_data.json"):
        with open("bmi_data.json", "r") as f:
            return [json.loads(line) for line in f]
    else:
        return []

# pie chart
def create_pie_chart():
    data = read_data()
    categories = [get_bmi_category(calculate_bmi(float(entry["height"]), float(entry["weight"]))) for entry in data]
    category_counts = {category: categories.count(category) for category in bmi_categories.keys()}

    fig, ax = plt.subplots()
    ax.pie(category_counts.values(), labels=category_counts.keys(), autopct='%1.1f%%', startangle=90)
    ax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.

    return fig

# pie chart
def show_pie_chart():
    fig = create_pie_chart()
    canvas = FigureCanvasTkAgg(fig, master=window)
    canvas.get_tk_widget().pack()

# "Submit" button click
def submit():
    name = name_entry.get()
    age = age_entry.get()
    height = height_entry.get()
    weight = weight_entry.get()

    if validate_input(name, age, height, weight):
        bmi = calculate_bmi(float(height), float(weight))
        category = get_bmi_category(bmi)

        data = {
            "name": name,
            "age": age,
            "height": height,
            "weight": weight,
            "bmi": bmi,
            "category": category
        }

        save_data(data)
        messagebox.showinfo("Success", f"Data saved successfully!\nBMI Category: {category}")
    else:
        messagebox.showerror("Error", "Invalid input. Please enter valid values for age, height, and weight.")

# main 
window = tk.Tk()
window.title("BMI Calculator")

# input fields
name_label = tk.Label(window, text="Name:")
name_entry = tk.Entry(window)
age_label = tk.Label(window, text="Age:")
age_entry = tk.Entry(window)
height_label = tk.Label(window, text="Height (m):")
height_entry = tk.Entry(window)
weight_label = tk.Label(window, text="Weight (kg):")
weight_entry = tk.Entry(window)

submit_button = tk.Button(window, text="Submit", command=submit)

show_graph_button = tk.Button(window, text="Show Graph", command=show_pie_chart)

name_label.pack()
name_entry.pack()
age_label.pack()
age_entry.pack()
height_label.pack()
height_entry.pack()
weight_label.pack()
weight_entry.pack()
submit_button.pack()
show_graph_button.pack()

# Start the main event loop
window.mainloop()
